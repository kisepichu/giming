Ok(vec![Problem { id: "abc375_a".to_string(), code: "A".to_string(), title: "A - Seats".to_string(), statement: "\n\n\n\nProblem Statement\nThere are \nN\n seats in a row, numbered \n1, 2, \\ldots, N\n.\n\n\nThe state of the seats is given by a string \nS\n of length \nN\n consisting of \n#\n and \n.\n. If the \ni\n-th character of \nS\n is \n#\n, it means seat \ni\n is occupied; if it is \n.\n, seat \ni\n is unoccupied.\n\n\nFind the number of integers \ni\n between \n1\n and \nN - 2\n, inclusive, that satisfy the following condition:\n\n\n\n\nSeats \ni\n and \ni + 2\n are occupied, and seat \ni + 1\n is unoccupied.\n\n\n\n\n\n".to_string(), constraints: vec!["N is an integer satisfying 1 \\leq N \\leq 2 \\times 10^5.".to_string(), "S is a string of length N consisting of # and ..".to_string()], input_format: "N\n\n\nS\n\n".to_string(), samples: vec![Sample { input: "6\n#.##.#\n".to_string(), output: "2\n".to_string() }, Sample { input: "1\n#\n".to_string(), output: "0\n".to_string() }, Sample { input: "9\n##.#.#.##\n".to_string(), output: "3\n".to_string() }], point: 100, time_limit: 2000, memory_limit: 1024 }, Problem { id: "abc375_b".to_string(), code: "B".to_string(), title: "B - Traveling Takahashi Problem".to_string(), statement: "\n\n\n\nProblem Statement\nTakahashi is at the origin on a two-dimensional coordinate plane.\n\n\nThe cost for him to move from point \n(a, b)\n to point \n(c, d)\n is \n\\sqrt{(a - c)^2 + (b - d)^2}\n.\n\n\nFind the total cost when he starts at the origin, visits \nN\n points \n(X_1, Y_1), \\ldots, (X_N, Y_N)\n in this order, and then returns to the origin.\n\n\n\n".to_string(), constraints: vec!["1 \\leq N \\leq 2 \\times 10^5".to_string(), "-10^9 \\leq X_i, Y_i \\leq 10^9".to_string(), "All input values are integers.".to_string()], input_format: "N\n\n\nX_1\n \nY_1\n\n\n\\vdots\n\n\nX_N\n \nY_N\n\n".to_string(), samples: vec![Sample { input: "2\n1 2\n-1 0\n".to_string(), output: "6.SANITIZED\n".to_string() }, Sample { input: "7\n-14142 13562\n-17320 50807\n-22360 67977\n24494 89742\n-26457 51311\n28284 27124\n31622 77660\n".to_string(), output: "384694.SANITIZED\n".to_string() }, Sample { input: "5\n-100000 100000\n100000 -100000\n-100000 100000\n100000 -100000\n-100000 100000\n".to_string(), output: "1414213.SANITIZED\n".to_string() }], point: 150, time_limit: 2000, memory_limit: 1024 }, Problem { id: "abc375_c".to_string(), code: "C".to_string(), title: "C - Spiral Rotation".to_string(), statement: "\n\n\n\nProblem Statement\nYou are given a grid with \nN\n rows and \nN\n columns, where \nN\n is an even number. Let \n(i, j)\n denote the cell at the \ni\n-th row from the top and \nj\n-th column from the left.\n\n\nEach cell is painted black or white. If \nA_{i, j} =\n \n#\n, cell \n(i, j)\n is black; if \nA_{i, j} =\n \n.\n, it is white.\n\n\nFind the color of each cell after performing the following operation for \ni = 1, 2, \\ldots, \\frac{N}{2}\n in this order.\n\n\n\n\nFor all pairs of integers \nx, y\n between \ni\n and \nN + 1 - i\n, inclusive, replace the color of cell \n(y, N + 1 - x)\n with the color of cell \n(x, y)\n. Perform these replacements \nsimultaneously for all such pairs \nx, y\n.\n\n\n\n\n\n".to_string(), constraints: vec!["N is an even number between 2 and 3000, inclusive.".to_string(), "Each A_{i, j} is # or ..".to_string()], input_format: "N\n\n\nA_{1,1}A_{1,2}\\ldots A_{1,N}\n\n\nA_{2,1}A_{2,2}\\ldots A_{2,N}\n\n\n\\vdots\n\n\nA_{N,1}A_{N,2}\\ldots A_{N,N}\n\n".to_string(), samples: vec![Sample { input: "8\n.......#\n.......#\n.####..#\n.####..#\n.##....#\n.##....#\n.#######\n.#######\n".to_string(), output: "........\n#######.\n#.....#.\n#.###.#.\n#.#...#.\n#.#####.\n#.......\n########\n".to_string() }, Sample { input: "6\n.#.#.#\n##.#..\n...###\n###...\n..#.##\n#.#.#.\n".to_string(), output: "#.#.#.\n.#.#.#\n#.#.#.\n.#.#.#\n#.#.#.\n.#.#.#\n".to_string() }, Sample { input: "12\n.......#.###\n#...#...#..#\n###.#..#####\n..#.#.#.#...\n.#.....#.###\n.......#.#..\n#...#..#....\n#####.......\n...#...#.#.#\n..###..#..##\n#..#.#.#.#.#\n.####.......\n".to_string(), output: ".#..##...##.\n#.#.#.#.#...\n###.##..#...\n#.#.#.#.#...\n#.#.##...##.\n............\n............\n.###.###.###\n...#...#.#..\n.###...#.###\n...#...#...#\n.###...#.###\n".to_string() }], point: 400, time_limit: 3000, memory_limit: 1024 }, Problem { id: "abc375_d".to_string(), code: "D".to_string(), title: "D - ABA".to_string(), statement: "\n\n\n\nProblem Statement\nYou are given a string \nS\n consisting of uppercase English letters.\n\n\nFind the number of integer triples \n(i, j, k)\n satisfying both of the following conditions:\n\n\n\n\n1 \\leq i < j < k \\leq |S|\n\n\nThe length-\n3\n string formed by concatenating \nS_i\n, \nS_j\n, and \nS_k\n in this order is a palindrome.\n\n\n\n\nHere, \n|S|\n denotes the length of \nS\n, and \nS_x\n denotes the \nx\n-th character of \nS\n.\n\n\n\n".to_string(), constraints: vec!["S is a string of length between 1 and 2 \\times 10^5, inclusive, consisting of uppercase English letters.".to_string()], input_format: "S\n\n".to_string(), samples: vec![Sample { input: "ABCACC\n".to_string(), output: "5\n".to_string() }, Sample { input: "OOOOOOOO\n".to_string(), output: "56\n".to_string() }, Sample { input: "XYYXYYXYXXX\n".to_string(), output: "75\n".to_string() }], point: 400, time_limit: 2000, memory_limit: 1024 }, Problem { id: "abc375_e".to_string(), code: "E".to_string(), title: "E - 3 Team Division".to_string(), statement: "\n\n\n\nProblem Statement\nThere are \nN\n people divided into three teams.\n\n\nThe people are numbered \n1, 2, \\ldots, N\n, and the teams are numbered \n1, 2, 3\n. Currently, person \ni\n belongs to team \nA_i\n.\n\n\nEach person has a value called \nstrength\n; person \ni\n has a strength of \nB_i\n. The \nstrength\n of a team is defined as the sum of the strengths of its members.\n\n\nDetermine whether it is possible for zero or more people to switch teams so that all teams have equal strength. If it is possible, find the minimum number of people who need to switch teams to achieve this.\n\n\nYou cannot create new teams other than teams \n1\n, \n2\n, \n3\n.\n\n\n\n".to_string(), constraints: vec!["3 \\leq N \\leq 100".to_string(), "A_i \\in \\lbrace 1, 2, 3 \\rbrace".to_string(), "For each x \\in \\lbrace 1, 2, 3 \\rbrace, there exists some i with A_i = x.".to_string(), "1 \\leq B_i".to_string(), "\\displaystyle\\sum_{i = 1}^{N} B_i \\leq 1500 ".to_string(), "All input values are integers.".to_string()], input_format: "N\n\n\nA_1\n \nB_1\n\n\nA_2\n \nB_2\n\n\n\\vdots\n\n\nA_N\n \nB_N\n\n".to_string(), samples: vec![Sample { input: "6\n1 2\n2 5\n1 5\n3 3\n1 3\n3 6\n".to_string(), output: "2\n".to_string() }, Sample { input: "4\n1 1\n1 2\n2 3\n3 4\n".to_string(), output: "-1\n".to_string() }, Sample { input: "3\n1 1\n2 1\n3 1\n".to_string(), output: "0\n".to_string() }, Sample { input: "12\n2 5\n1 4\n3 3\n2 3\n3 9\n1 2\n2 2\n3 9\n2 6\n1 9\n1 1\n3 1\n".to_string(), output: "3\n".to_string() }], point: 450, time_limit: 4000, memory_limit: 1024 }, Problem { id: "abc375_f".to_string(), code: "F".to_string(), title: "F - Road Blocked".to_string(), statement: "\n\n\n\nProblem Statement\nIn the nation of AtCoder, there are \nN\n cities numbered \n1\n to \nN\n, and \nM\n roads numbered \n1\n to \nM\n.\n\nRoad \ni\n connects cities \nA_i\n and \nB_i\n bidirectionally and has a length of \nC_i\n.\n\n\nYou are given \nQ\n queries to process in order. The queries are of the following two types.\n\n\n\n\n1 i\n: Road \ni\n becomes closed.\n\n\n2 x y\n: Print the shortest distance from city \nx\n to city \ny\n, using only roads that are not closed. If city \ny\n cannot be reached from city \nx\n, print \n-1\n instead.\n\n\n\n\nIt is guaranteed that each test case contains at most \n300\n queries of the first type.\n\n\n\n".to_string(), constraints: vec!["2 \\leq N \\leq 300".to_string(), "0 \\leq M \\leq \\frac{N(N-1)}{2}".to_string(), "1 \\leq A_i < B_i \\leq N".to_string(), "All pairs (A_i, B_i) are distinct.".to_string(), "1 \\leq C_i \\leq 10^9".to_string(), "1 \\leq Q \\leq 2 \\times 10^5".to_string(), "In the queries of the first type, 1 \\leq i \\leq M.".to_string(), "The road given in a query of the first type is not already closed at that time.".to_string(), "The number of queries of the first type is at most 300.".to_string(), "In the queries of the second type, 1 \\leq x < y \\leq N.".to_string(), "All input values are integers.".to_string()], input_format: "N\n \nM\n \nQ\n\n\nA_1\n \nB_1\n \nC_1\n\n\n\\vdots\n\n\nA_M\n \nB_M\n \nC_M\n\n\n\\mathrm{query}_1\n\n\n\\vdots\n\n\n\\mathrm{query}_Q\n\n".to_string(), samples: vec![Sample { input: "3 3 5\n1 2 5\n1 3 10\n2 3 6\n2 1 3\n1 2\n2 1 3\n1 1\n2 1 3\n".to_string(), output: "10\n11\n-1\n".to_string() }, Sample { input: "4 6 6\n2 3 1\n2 4 1\n3 4 1\n1 2 1\n1 3 1\n1 4 1\n1 4\n1 5\n1 6\n2 1 2\n2 1 3\n2 1 4\n".to_string(), output: "-1\n-1\n-1\n".to_string() }], point: 550, time_limit: 2500, memory_limit: 1024 }, Problem { id: "abc375_g".to_string(), code: "G".to_string(), title: "G - Road Blocked 2".to_string(), statement: "\n\n\n\nProblem Statement\nIn the nation of AtCoder, there are \nN\n cities numbered \n1\n to \nN\n, and \nM\n roads numbered \n1\n to \nM\n.\n\nRoad \ni\n connects cities \nA_i\n and \nB_i\n bidirectionally and has a length of \nC_i\n.\n\n\nFor each \ni = 1, \\ldots, M\n, determine whether the following two values are different.\n\n\n\n\nThe shortest distance from city \n1\n to city \nN\n when all roads are passable\n\n\nThe shortest distance from city \n1\n to city \nN\n when the \nM - 1\n roads other than road \ni\n are passable\n\n\n\n\nIf city \nN\n can be reached from city \n1\n in one of these cases but not the other, the two values are considered different.\n\n\n\n".to_string(), constraints: vec!["2 \\leq N \\leq 2 \\times 10^5".to_string(), "1 \\leq M \\leq 2 \\times 10^5".to_string(), "1 \\leq A_i < B_i \\leq N".to_string(), "All pairs (A_i, B_i) are distinct.".to_string(), "1 \\leq C_i \\leq 10^9".to_string(), "City N can be reached from city 1 when all roads are passable.".to_string(), "All input values are integers.".to_string()], input_format: "N\n \nM\n\n\nA_1\n \nB_1\n \nC_1\n\n\n\\vdots\n\n\nA_M\n \nB_M\n \nC_M\n\n".to_string(), samples: vec![Sample { input: "3 3\n1 2 5\n1 3 10\n2 3 6\n".to_string(), output: "No\nYes\nNo\n".to_string() }, Sample { input: "4 6\n2 3 1\n2 4 1\n3 4 1\n1 2 1\n1 3 1\n1 4 1\n".to_string(), output: "No\nNo\nNo\nNo\nNo\nYes\n".to_string() }, Sample { input: "2 1\n1 2 1\n".to_string(), output: "Yes\n".to_string() }], point: 575, time_limit: 3000, memory_limit: 1024 }])
